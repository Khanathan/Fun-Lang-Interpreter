// Define a factorial function using recursion and let binding
let fact = \n -> if n == 0 then 1 else n * fact (n - 1) in
fact 5

// Define a higher-order function that applies a function twice
let twice = \f -> \x -> f (f x) in
let add3 = \x -> x + 3 in
twice add3 10

// Anonymous functions as arguments
let map = \f -> \xs -> if xs == 0 then 0 else f xs in
map (\x -> x + 1) 5

// Testing boolean logic
if true then (if false then 0 else 1) else 2